{"version":3,"sources":["components/model/FormData.js","components/services/SystemNumberTransformer.js","components/dictionary/AcceptCharList.js","components/dictionary/ErrorMessages.js","components/model/ValidState.js","components/services/Validator.js","components/SystemNumberTransformerForm.js","App.js","serviceWorker.js","index.js"],"names":["FormData","this","number","inSystemNumber","outSystemNumber","SystemNumberTransformer","ACCEPTABLE_CHARLIST","data","transferNumberToOutputSystemNumber","transferNumberTo10SystemNumber","stringNumber","setNumberToArray","outputNum10","parsedInSystemNumber","Number","parseInt","i","length","convertLetterToNum","Math","pow","arr","push","reverse","value","indexOf","newString","currentValue","moduloString","parsedOutSystemNumber","modulo","reverseModuloString","convertNumToLetter","join","ERRORS_MESSAGES","EMPTY_FIELD","NOT_ACCEPTABLE_STRING","NOT_ACCEPTABLE_SYSTEM_IN_NUMBER","TOO_BIG_SYSTEM","ValidState","message","state","Validator","MAX_SYSTEM_NUMBER","setValidState","systemNumberKey","messageKey","isAcceptable","key","substring","lengthAcceptChar","inAcceptCharList","outAcceptCharList","SystemNumberTransformerForm","props","systemNumberTransformator","SystemNumberTransformator","validator","formDataNumber","formDataInSystemNumber","formDataOutSystemNumber","formValidNumber","undefined","formValidInSystemNumber","formValidOutSystemNumber","formValidNumberErrorMsg","formValidInSystemNumberErrorMsg","formValidOutSystemNumberErrorMsg","result","event","preventDefault","setDataNumber","setDataInSystemNumber","setDataOutSystemNumber","setState","transform","target","toLowerCase","test","isNotEmpty","isAcceptableString","generateAcceptCharListInSystem","tooBigSystemNumber","isAccepatbleSystem","isFieldNumberIsFill","isFieldInSystemNumberIsFill","isFieldOutSystemNumberIsFill","className","for","type","onChange","handleChangeNumber","bind","id","required","handleChangeInSystemNumber","onBlur","handleOnBlurInSystemNumber","disabled","handleChangeOutSystemNumber","isDisabled","onClick","handleClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5559a05.chunk.js","sourcesContent":["export default class FormData {\r\n  constructor() {\r\n    this.number = null;\r\n    this.inSystemNumber = null;\r\n    this.outSystemNumber = null;\r\n  }\r\n} ","\r\nimport FormData from '../model/FormData.js';\r\nimport { ACCEPTABLE_CHARLIST } from '../dictionary/AcceptCharList.js';\r\nexport default class SystemNumberTransformer {\r\n  constructor() {\r\n    this.ACCEPTABLE_CHARLIST = ACCEPTABLE_CHARLIST;\r\n    this.data = new FormData();\r\n  }\r\n\r\n  setDataNumber(number) {\r\n    this.data.number = number;\r\n  }\r\n\r\n  setDataInSystemNumber(inSystemNumber) {\r\n    this.data.inSystemNumber = inSystemNumber;\r\n  }\r\n\r\n  setDataOutSystemNumber(outSystemNumber) {\r\n    this.data.outSystemNumber = outSystemNumber;\r\n  }\r\n\r\n  transform() {\r\n    return this.transferNumberToOutputSystemNumber(this.transferNumberTo10SystemNumber());\r\n  }\r\n\r\n  transferNumberTo10SystemNumber() {\r\n    let stringNumber = this.setNumberToArray();\r\n    let outputNum10 = 0;\r\n    let parsedInSystemNumber = Number.parseInt(this.data.inSystemNumber);\r\n    for (var i = 0; stringNumber.length > i; i++){\r\n      if (parsedInSystemNumber > 9 ) {\r\n        stringNumber[i] = this.convertLetterToNum(stringNumber[i]);\r\n      }\r\n       outputNum10 = outputNum10 +  (Number.parseInt(stringNumber[i]) * Math.pow(parsedInSystemNumber,i));\r\n    }\r\n\r\n    return outputNum10;\r\n  }\r\n\r\n  setNumberToArray() {\r\n    var arr = [];\r\n    for (var i= 0; this.data.number.length > i; i++) {\r\n      arr.push(this.data.number[i]);\r\n    }\r\n    return arr.reverse();\r\n  }\r\n\r\n  convertLetterToNum(value) {\r\n    return this.ACCEPTABLE_CHARLIST.indexOf(value, 0);\r\n  }\r\n\r\n  convertNumToLetter(value) {\r\n    var newString = [];\r\n    for (var i= 0; value.length > i; i++){\r\n      newString.push(this.ACCEPTABLE_CHARLIST[Number.parseInt(value[i])]);\r\n    }\r\n    return newString;\r\n  }\r\n\r\n  transferNumberToOutputSystemNumber(value) {\r\n    let currentValue = value;\r\n    let moduloString = [];\r\n    let parsedOutSystemNumber = Number.parseInt(this.data.outSystemNumber);\r\n\r\n    while (currentValue !== 0) {\r\n      let modulo = currentValue % parsedOutSystemNumber;\r\n      currentValue = currentValue - modulo;\r\n      moduloString.push(modulo);\r\n      currentValue = currentValue/parsedOutSystemNumber;\r\n    }\r\n\r\n    var reverseModuloString = moduloString.reverse();\r\n    if (parsedOutSystemNumber > 9  ) {\r\n      reverseModuloString = this.convertNumToLetter(reverseModuloString)\r\n    }\r\n    return reverseModuloString.join('');\r\n  }\r\n}","export const ACCEPTABLE_CHARLIST = '0123456789abcdef';","export const ERRORS_MESSAGES = {\r\n  EMPTY_FIELD: 'Pole nie może być puste',\r\n  NOT_ACCEPTABLE_STRING: 'Maksymalny system obsługiwany to szesnastkowy',\r\n  NOT_ACCEPTABLE_SYSTEM_IN_NUMBER: 'Podana liczba nie zgadza sie z podanym typem systemu liczbowego',\r\n  TOO_BIG_SYSTEM: 'Maksymalny obsługiwany system to szesnastkowy',\r\n}","export default class ValidState {\r\n  constructor(message, state) {\r\n    this.message = message;\r\n    this.state = state;\r\n  }\r\n}","import { ACCEPTABLE_CHARLIST } from '../dictionary/AcceptCharList.js';\r\nimport { ERRORS_MESSAGES } from '../dictionary/ErrorMessages.js';\r\nimport ValidState from '../model/ValidState.js';\r\n\r\nexport default class Validator {\r\n  constructor() {\r\n    this.ACCEPTABLE_CHARLIST = ACCEPTABLE_CHARLIST;\r\n    this.ERRORS_MESSAGES = ERRORS_MESSAGES;\r\n    this.MAX_SYSTEM_NUMBER = 16;\r\n  }\r\n\r\n  isNotEmpty(value) {\r\n    return !value ? this.setValidState('EMPTY_FIELD', false) : this.setValidState('', true);\r\n  }\r\n\r\n  isAccepatbleSystem(value, systemNumberKey, messageKey) {\r\n    let isAcceptable = true;\r\n    for(let i= 0; value.length > i; i++) {\r\n      if(this[systemNumberKey].indexOf(value[i]) === -1) {\r\n        isAcceptable = false;\r\n        break;\r\n      }\r\n    }\r\n    return isAcceptable ?  this.setValidState('', true) :  this.setValidState(`NOT_ACCEPTABLE_SYSTEM_${messageKey}_NUMBER`, false);\r\n  }\r\n\r\n  isAcceptableString(value) {\r\n    let isAcceptable = true;\r\n    for(let i= 0; value.length > i; i++) {\r\n      if(this.ACCEPTABLE_CHARLIST.indexOf(value[i]) === -1) {\r\n        isAcceptable = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isAcceptable ?  this.setValidState('', true) :  this.setValidState('NOT_ACCEPTABLE_STRING', false);\r\n  }\r\n\r\n  tooBigSystemNumber(value) {\r\n    return value > this.MAX_SYSTEM_NUMBER ? this.setValidState('TOO_BIG_SYSTEM', false) :  this.setValidState('', true);\r\n  }\r\n\r\n  setValidState(key, value) {\r\n    return new ValidState(this.ERRORS_MESSAGES[key] || '', value);\r\n  }\r\n\r\n  substring(length) {\r\n    return this.ACCEPTABLE_CHARLIST.substring(0, length);\r\n  }\r\n\r\n  generateAcceptCharListInSystem(lengthAcceptChar) {\r\n    this.inAcceptCharList = this.substring(lengthAcceptChar);\r\n  }\r\n\r\n  generateAcceptCharListOutSystem(lengthAcceptChar) {\r\n    this.outAcceptCharList = this.substring(lengthAcceptChar);\r\n  }\r\n}","import React, {Component} from 'react';\nimport SystemNumberTransformator from './services/SystemNumberTransformer';\nimport Validator from './services/Validator';\n\nclass SystemNumberTransformerForm extends Component {\n  constructor(props) {\n    super(props);\n    this.systemNumberTransformator = new SystemNumberTransformator();\n    this.validator = new Validator();\n    this.state = {\n      formDataNumber: null,\n      formDataInSystemNumber: 0,\n      formDataOutSystemNumber: 0,\n      formValidNumber: undefined,\n      formValidInSystemNumber: undefined,\n      formValidOutSystemNumber: undefined,\n      formValidNumberErrorMsg: '',\n      formValidInSystemNumberErrorMsg: '',\n      formValidOutSystemNumberErrorMsg: '',\n      result: null,\n    };\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n    this.systemNumberTransformator.setDataNumber(this.state.formDataNumber);\n    this.systemNumberTransformator.setDataInSystemNumber(this.state.formDataInSystemNumber);\n    this.systemNumberTransformator.setDataOutSystemNumber(this.state.formDataOutSystemNumber);\n    this.setState({result: this.systemNumberTransformator.transform()});\n  }\n\n  handleChangeNumber(event) {\n    this.setState({formDataNumber: event.target.value.toLowerCase()});\n    let test = this.validator.isNotEmpty(event.target.value);\n    this.setState({formValidNumber: test.state});\n    if(!test.state) {\n      this.setState({formValidNumberErrorMsg: test.message});\n      return;\n    }\n    test = this.validator.isAcceptableString(event.target.value);\n    this.setState({formValidNumber: test.state});\n    if(!test.state) {\n      this.setState({formValidNumberErrorMsg: test.message});\n      return;\n    }\n  }\n\n  handleChangeInSystemNumber(event) {\n    this.setState({formDataInSystemNumber: event.target.value});\n    this.validator.generateAcceptCharListInSystem(event.target.value);\n    let test = this.validator.isNotEmpty(event.target.value);\n    this.setState({formValidInSystemNumber: test.state});\n    if(!test.state) {\n      this.setState({formValidInSystemNumberErrorMsg: test.message});\n      return;\n    }\n    test = this.validator.tooBigSystemNumber(event.target.value);\n    this.setState({formValidInSystemNumber: test.state});\n    if(!test.state) {\n      this.setState({formValidInSystemNumberErrorMsg: test.message});\n      return;\n    }\n  }\n\n\n  handleChangeOutSystemNumber(event) {\n    this.setState({formDataOutSystemNumber: event.target.value});\n    let test = this.validator.isNotEmpty(event.target.value);\n    this.setState({formValidOutSystemNumber: test.state});\n    if(!test.state) {\n      this.setState({formValidOutSystemNumberErrorMsg: test.message});\n      return;\n    }\n    test = this.validator.tooBigSystemNumber(event.target.value);\n    this.setState({formValidOutSystemNumber: test.state});\n    if(!test.state) {\n      this.setState({formValidOutSystemNumberErrorMsg: test.message});\n      return;\n    }\n  }\n\n  handleOnBlurInSystemNumber() {\n    let test = this.validator.isAccepatbleSystem(this.state.formDataNumber, 'inAcceptCharList', 'IN');\n    this.setState({formValidNumber: test.state});\n    if(!test.state) {\n      this.setState({formValidNumberErrorMsg: test.message});\n      return;\n    }\n  }\n\n  isFieldNumberIsFill() {\n    return this.state.formValidNumber;\n  }\n\n  isFieldInSystemNumberIsFill() {\n    return this.state.formValidInSystemNumber && this.isFieldNumberIsFill() ? true : false;\n  }\n\n  isFieldOutSystemNumberIsFill() {\n    return this.state.formValidOutSystemNumber && this.isFieldInSystemNumberIsFill() ? true : false;\n  }\n\n  isDisabled() {\n    return this.isFieldOutSystemNumberIsFill() ? false : true;\n  }\n\n  render(){\n    return (\n      <div className={this.props.className}>\n        <h1 className={`${this.props.className}__title`}>Transformer Liczbowy</h1>\n        <p className={`${this.props.className}__paragraph`}> \n          Podaj dowolny system liczbowy i przez transferuj na dowolny system liczbowy\n        </p>\n        <form>\n          <div className={`${this.props.className}__group`}>\n            <label \n              for=\"number\"\n              className={`${this.props.className}__label`}\n            >\n              Podaj liczbę\n              </label>\n            <input \n              type=\"text\"\n              onChange={this.handleChangeNumber.bind(this)}\n              id=\"number\"\n              required\n              className={`${this.props.className}__input`}\n            />\n            {this.state.formValidNumber === false &&\n              <span className={`${this.props.className}__error`}>{this.state.formValidNumberErrorMsg}</span>\n            }\n          </div>\n\n          <div className={`${this.props.className}__group`}>\n            <label \n              for=\"inSystemNumber\"\n              className={`${this.props.className}__label`}\n            >\n              Podaj system wejściowy(za pomocą liczby)\n              </label>\n            <input \n              type=\"number\"\n              onChange={this.handleChangeInSystemNumber.bind(this)} \n              onBlur={this.handleOnBlurInSystemNumber.bind(this)}\n              disabled={!this.state.formValidNumber}\n              id=\"inSystemNumber\"\n              required\n              className={`${this.props.className}__input`}\n            />\n            {this.state.formValidInSystemNumber === false &&\n              <span className={`${this.props.className}__error`}>{this.state.formValidInSystemNumberErrorMsg}</span>\n            }\n          </div>\n\n          <div className={`${this.props.className}__group`}>\n            <label \n              for=\"formOutSystemNumber\"\n              className={`${this.props.className}__label`}\n            >\n                Podaj system wyjściowy(za pomocą liczby)\n            </label>\n            <input \n              type=\"number\"\n              onChange={this.handleChangeOutSystemNumber.bind(this)} \n              disabled={!this.state.formValidInSystemNumber}\n              id=\"formOutSystemNumber\"\n              required\n              className={`${this.props.className}__input`}\n            />\n            {this.state.formValidOutSystemNumber === false &&\n              <span className={`${this.props.className}__error`}>{this.state.formValidOutSystemNumberErrorMsg}</span>\n            }\n          </div>\n          <button \n            type=\"submit\"\n            disabled={this.isDisabled()}\n            onClick={this.handleClick.bind(this)}\n          >Transferuj</button>\n        </form>\n        <div>Twój rezultat to: {this.state.result}</div>\n      </div>\n    )\n  }\n}\n\nexport default SystemNumberTransformerForm;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport SystemNumberTransformerForm from './components/SystemNumberTransformerForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <SystemNumberTransformerForm \n          className=\"componentForm\"\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}